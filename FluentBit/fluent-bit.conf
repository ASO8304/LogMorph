input {
  udp {
    port => 5140
  }
}

filter {
  grok {
    match => {
      "message" => [
        # — Format #1: seq first, single MAC, trailing rest1 —
        "^%{NUMBER:seq}\s+\[%{WORD:in_mac} %{WORD:out_mac}\]\s+%{WORD:dir1}\s+%{WORD:dir2}\s+%{NUMBER:len1}\s+%{NUMBER:proto1}\s+%{IP:src1}\s+%{IP:dst1}\s+%{GREEDYDATA:rest1}",
        # — Format #3: count+seq, single MAC, trailing rest1 —
        "^%{NUMBER:count}\s+%{NUMBER:seq}\s+\[%{WORD:in_mac} %{WORD:out_mac}\]\s+%{WORD:dir1}\s+%{WORD:dir2}\s+%{NUMBER:len1}\s+%{NUMBER:proto1}\s+%{IP:src1}\s+%{IP:dst1}\s+%{GREEDYDATA:rest1}",
        # — Format #2: count+seq, two MAC blocks, rest1/rest2 —
        "^%{NUMBER:count}\s+%{NUMBER:seq}\s+\[%{WORD:in_mac} %{WORD:out_mac}\]\s+%{WORD:dir1}\s+%{WORD:dir2}\s+%{NUMBER:len1}\s+%{NUMBER:proto1}\s+%{IP:src1}\s+%{IP:dst1}\s+%{GREEDYDATA:rest1}\s+\[%{WORD:in_mac2} %{WORD:out_mac2}\]\s+%{NUMBER:len2}\s+%{NUMBER:proto2}\s+%{IP:src2}\s+%{IP:dst2}\s+%{GREEDYDATA:rest2}"
      ]
    }
    tag_on_failure => ["_grok_fail"]
  }

  # Indicate success/failure
  if "_grok_fail" not in [tags] {
    mutate { add_field => { "log_stage" => "grok_ok" } }
  } else {
    mutate { add_field => { "log_stage" => "grok_fail" } }
  }

  # Merge & parse any trailing rest1/rest2 into kv_fields
  if [rest1] or [rest2] {
    mutate {
      add_field    => { "raw_kv" => "%{rest1} %{rest2}" }
      remove_field => ["rest1","rest2"]
    }
    kv {
      source       => "raw_kv"
      field_split  => "\s+"
      value_split  => "[:=\-]"
      trim_key     => "\s"
      trim_value   => "\s"
      remove_field => ["raw_kv"]
      target       => "kv_fields"
    }
  }
}

output {
  http {
    url          => "http://127.0.0.1:10000/logs"
    http_method  => "post"
    format       => "json_batch"
    content_type => "application/json"
    retry_failed => false
  }
  stdout { codec => rubydebug }
}

~                                                                                                                                                                                                                                                                                                                   
~                                                                                                                                                                                                                                                                                                                   
~                                                                                                                                                                                                                                                                                                                   
~                                                                                                 